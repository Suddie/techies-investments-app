
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Function to get user's access level from their profile in 'users' collection
    // Returns 4 if user profile not found or accessLevel not set (most restrictive)
    function getUserAccessLevel(userId) {
      let userProfile = get(/databases/$(database)/documents/users/$(userId)).data;
      return userProfile != null && 'accessLevel' in userProfile ? userProfile.accessLevel : 4;
    }
    
    function hasAccessLevel(userId, requiredLevel) {
        let userLevel = getUserAccessLevel(userId);
        return userLevel <= requiredLevel;
    }

    // Settings Collection
    match /settings/{settingId} {
      // Only authenticated users can read global settings.
      allow read: if isAuthenticated();
      // Only Admins (Level 1) can write to global settings.
      allow write: if isAuthenticated() && hasAccessLevel(request.auth.uid, 1);
    }

    // Users Collection
    match /users/{userId} {
      // Users can read their own profile.
      // Admins (Level 1) can read any user profile.
      allow read: if isUser(userId) || hasAccessLevel(request.auth.uid, 1);
      
      // Users can update their own profile (e.g., name, tpin - assuming tpin is managed securely).
      // Admins (Level 1) can update any user profile (role, status, requiresPasswordChange).
      // For create: Admin creates new users. Firebase Auth handles actual user creation.
      // This rule allows an Admin to create the Firestore document for a user they just created in Auth.
      allow create: if isAuthenticated() && hasAccessLevel(request.auth.uid, 1);
      allow update: if isUser(userId) || hasAccessLevel(request.auth.uid, 1);
      
      // Generally, users should not delete their own profiles directly. Deactivation is preferred.
      // Admins (Level 1) can delete user profiles (use with caution).
      allow delete: if isAuthenticated() && hasAccessLevel(request.auth.uid, 1);
    }

    // Contributions Collection
    match /contributions/{contributionId} {
      // Users can read their own contributions.
      // Admins (Level 1) can read all contributions.
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || hasAccessLevel(request.auth.uid, 1));
      
      // Users with access level 3 or better can create their own contributions.
      // Validate that the contribution being created is for the authenticated user.
      allow create: if isAuthenticated() && 
                      hasAccessLevel(request.auth.uid, 3) && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.amount > 0; // Basic validation
                      // More complex validation (min/max amount from settings) might need Cloud Functions
                      // or passing settings values in the request for rule checking if feasible.

      // Generally, contributions should not be updatable or deletable by users after creation.
      // Admins (Level 1) might be allowed to correct/update.
      allow update: if isAuthenticated() && hasAccessLevel(request.auth.uid, 1);
      allow delete: if isAuthenticated() && hasAccessLevel(request.auth.uid, 1);
    }

    // Expenses Collection
    match /expenses/{expenseId} {
        // Authenticated users can read expenses.
        allow read: if isAuthenticated();
        
        // Users with Level 1 access (Admin, Treasurer) can create, update, delete expenses.
        allow create, update, delete: if isAuthenticated() && hasAccessLevel(request.auth.uid, 1) &&
                                      request.resource.data.totalAmount > 0 && // Validate amount
                                      request.resource.data.enteredByUid == request.auth.uid; // Ensure creator is the one saving
    }

    // Milestones Collection
    match /milestones/{milestoneId} {
      // All authenticated users can read milestones.
      allow read: if isAuthenticated();
      // Only Level 1 users can create, update, or delete milestones.
      allow create, update, delete: if isAuthenticated() && hasAccessLevel(request.auth.uid, 1);
    }

    // Add rules for other collections (auditLog, stockItems, stockTransactions, tenants, rentInvoices, professionals, bankBalances, bankTransactions, companyInfo) as they are implemented.
    // Example for immutable auditLog:
    // match /auditLog/{logId} {
    //   allow read: if isAuthenticated();
    //   allow create: if isAuthenticated(); // Or restrict to Cloud Functions
    //   allow update, delete: if false; 
    // }

  }
}
