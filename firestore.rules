
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // It's important that user documents in /users/{userId} actually have an 'accessLevel' field.
    // Default to a highly restrictive level if the document or field is missing.
    function getUserAccessLevel(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.accessLevel != null ? userDoc.data.accessLevel : 4; // Default to 4 (most restrictive)
    }

    // USER PROFILES
    // Rules for the 'users' collection
    match /users/{userId} {
      allow get: if isAuthenticated() && (isOwner(userId) || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Admins create users
      allow update: if isAuthenticated() && (
                    (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['requiresPasswordChange', 'name', 'photoURL'])) || // Owner can update specific fields
                    (getUserAccessLevel(request.auth.uid) <= 1) // Admin can update more fields
                  );
      // No direct client-side delete for users for now, usually handled by Admin tools or backend processes
      allow delete: if false;
    }
    // Allow admins to list all users
    match /users/{document=**} {
       allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }


    // GLOBAL SETTINGS
    // Rules for the 'settings' collection, specifically 'global_settings' document
    match /settings/global_settings {
      allow get: if isAuthenticated();
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admins
    }

    // CONTRIBUTIONS
    // Rules for the 'contributions' collection
    match /contributions/{contributionId} {
      allow get: if isAuthenticated() && (resource.data.userId == request.auth.uid || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && getUserAccessLevel(request.auth.uid) <= 3;
      // Generally, contributions should be immutable or updates handled by backend/admin functions
      allow update, delete: if false;
    }
    // Allow Admins (L1) and specific roles (L2 for dashboard summaries) to list all contributions
    match /contributions/{document=**} {
        allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // EXPENSES
    // Rules for the 'expenses' collection
    match /expenses/{expenseId} {
      allow read: if isAuthenticated(); // All authenticated users can view expenses
      allow create, update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admins can create/update
      // Deletion might be restricted or handled by backend logic
      allow delete: if false; // Or: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // MILESTONES
    // Rules for the 'milestones' collection
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated(); // All authenticated users can view milestones
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admins
    }

    // STOCK ITEMS
    // Rules for the 'stockItems' collection
    match /stockItems/{itemId} {
      allow read: if isAuthenticated(); // All authenticated users can view stock items
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admins
    }

    // STOCK TRANSACTIONS
    // Rules for the 'stockTransactions' collection
    match /stockTransactions/{transactionId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3; // All members can view transaction history
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admins record transactions
      // Transactions should generally be immutable
      allow update, delete: if false;
    }

    // AUDIT LOG
    // Rules for the 'auditLog' collection
    match /auditLog/{logId} {
      allow read: if isAuthenticated(); // All authenticated users can view audit logs
      // Audit logs should ONLY be created by backend/Cloud Functions
      allow create, update, delete: if false;
    }

    // BANK BALANCES
    // Rules for the 'bankBalances' collection
    match /bankBalances/{balanceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2; // L1 and L2 can read
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // L1 can manage
    }
    match /bankBalances/{document=**} {
        allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }


    // TENANTS
    // Rules for the 'tenants' collection
    match /tenants/{tenantId} {
      allow get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    match /tenants/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // RENT INVOICES
    // Rules for the 'rentInvoices' collection
    match /rentInvoices/{invoiceId} {
      // L1 can manage. L2 might need read access for reporting if not aggregated.
      allow read, create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
     match /rentInvoices/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }


    // PROFESSIONALS
    // Rules for the 'professionals' collection
    match /professionals/{professionalId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2; // L1 & L2 can read
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // L1 can manage
    }
     match /professionals/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
