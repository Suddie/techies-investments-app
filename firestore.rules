
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // It's good practice to ensure the user document exists before trying to read from it.
    // And also to ensure that accessLevel is a number if it exists.
    function getUserAccessLevel(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data != null && 'accessLevel' in userDoc.data && userDoc.data.accessLevel is number ? userDoc.data.accessLevel : 4; // Default to most restrictive if no profile/level
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Admin creates users
      allow update: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 1);
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Admin can delete
    }
    match /users/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Global Settings
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admins can change settings
    }

    // Contributions
    match /contributions/{contributionId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && getUserAccessLevel(request.auth.uid) <= 3;
      // Add validation for amount against global_settings min/max contribution if possible/needed here
      // e.g. get(/databases/$(database)/documents/settings/global_settings).data.contributionMin
      allow update, delete: if false; // Typically, contributions are not updated/deleted client-side.
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if isAuthenticated(); // All authenticated users can view expenses
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Or make this false for immutability
    }
    
    // Milestones
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Items
    match /stockItems/{itemId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Transactions
    match /stockTransactions/{transactionId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      // Generally, transactions are immutable once created to maintain audit trail
      allow update: if false; 
      allow delete: if false;
    }

    // Audit Log
    match /auditLog/{logId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      // Client should NOT be able to write to audit log. This should be done by Cloud Functions.
      allow create, update, delete: if false;
    }

    // Bank Balances
    match /bankBalances/{balanceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Placeholder for other collections like penalties, tenants, professionals, etc.
    // match /penalties/{penaltyId} { ... }
    // match /tenants/{tenantId} { ... }
    // match /rentInvoices/{invoiceId} { ... }
    // match /professionals/{professionalId} { ... }
    // match /companyInfo/{docId} { ... } // For tax summary info
  }
}
