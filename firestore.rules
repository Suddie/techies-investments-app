
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserAccessLevel(userId) {
      let userData = get(/databases/$(database)/documents/users/$(userId)).data;
      // If user document or accessLevel doesn't exist, default to a restrictive level (e.g., 4)
      return userData != null && userData.accessLevel != null ? userData.accessLevel : 4;
    }

    // Settings
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Level 1 can write
    }

    // Users
    match /users/{userId} {
      allow read, update: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow delete: if false;
    }
    match /users {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }


    // Contributions
    match /contributions/{contributionId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && getUserAccessLevel(request.auth.uid) <= 3;
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || getUserAccessLevel(request.auth.uid) <= 1);
      allow update, delete: if false; 
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Milestones
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Items
    match /stockItems/{itemId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Transactions
    match /stockTransactions/{transactionId} {
      allow list, get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update, delete: if false; 
    }

    // Audit Log
    match /auditLog/{logId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if false;
    }
    
    // Bank Balances
    match /bankBalances/{balanceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Tenants
    match /tenants/{tenantId} {
      allow get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    match /tenants { // Rule for the collection itself
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }
  }
}
