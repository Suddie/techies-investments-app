
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole(userId) {
      return get(/databases/{database}/documents/users/{userId}).data.role;
    }

    // More robust function to get access level, defaulting to a restrictive level if not found
    function getUserAccessLevel(userId) {
      let userData = get(/databases/{database}/documents/users/{userId}).data;
      return (userData != null && userData.accessLevel != null) ? userData.accessLevel : 4;
    }

    function isAdmin(userId) {
      return getUserRole(userId) == 'Admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Security Rules for 'users' collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || getUserAccessLevel(request.auth.uid) == 1); // Admins can also read user profiles
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Admin creates users
      allow update: if isAuthenticated() && (isOwner(userId) || getUserAccessLevel(request.auth.uid) == 1);
      allow delete: if false; // Generally, don't allow client-side user deletion
    }

    // Security Rules for 'settings' collection (single document 'global_settings')
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read global settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Level 1 can write
    }

    // Security Rules for 'contributions' collection
    match /contributions/{contributionId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       getUserAccessLevel(request.auth.uid) <= 3 &&
                       request.resource.data.amount > 0; // Basic amount check
      allow read: if isAuthenticated() &&
                     (request.resource.data.userId == request.auth.uid || getUserAccessLevel(request.auth.uid) == 1);
      allow update: if false; // No client-side updates initially
      allow delete: if false; // No client-side deletes initially
    }

    // Security Rules for 'expenses' collection
    match /expenses/{expenseId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.enteredByUid == request.auth.uid &&
                       getUserAccessLevel(request.auth.uid) == 1; // Level 1 can create
      allow read: if isAuthenticated(); // All authenticated users can read expenses
      allow update: if isAuthenticated() &&
                       getUserAccessLevel(request.auth.uid) == 1; // Level 1 can update
      allow delete: if false; // No client-side deletes initially
    }
    
    // Security Rules for 'milestones' collection
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated(); // All authenticated users can read milestones
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Level 1 can CRUD
    }

    // Security Rules for 'stockItems' collection
    match /stockItems/{itemId} {
      allow read: if isAuthenticated(); // All authenticated users can read stock items
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Level 1 can CRUD
    }

    // Placeholder for future collections
    // match /auditLog/{logId} { ... }
    // match /stockTransactions/{transactionId} { ... }
    // match /tenants/{tenantId} { ... }
    // match /rentInvoices/{invoiceId} { ... }
    // match /professionals/{professionalId} { ... }
    // match /bankBalances/{balanceId} { ... }
    // match /bankTransactions/{transactionId} { ... }
    // match /companyInfo/details { ... } // Single doc for company info

  }
}
