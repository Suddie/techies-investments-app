
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Global settings: Allow public read.
    // IMPORTANT: For write, ensure only admins can modify. This example assumes an accessLevel field in the user's profile document.
    match /settings/global_settings {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Users: Authenticated users can read their own profile. Admins can manage.
    match /users/{userId} {
      allow read: if request.auth != null; // Users can read profiles (consider restricting fields)
      // Allow user creation if authenticated (admins usually create users, or self-registration)
      // If users can create their own profile:
      allow create: if request.auth != null && request.auth.uid == userId;
      // If only admins can create users, you'd check admin role:
      // allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;

      // Users can update their own profile, or admins can update any profile.
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1);
      // Deletion is typically admin-only
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Contributions: Users can create their own and read their own. Admins/Treasurers can read all.
    match /contributions/{contributionId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1);
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1; // Only Admin/Treasurer
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1; // Only Admin/Treasurer
    }

    // Expenses: Admins/Treasurers can CRUD. Members might read (if needed).
    match /expenses/{expenseId} {
      allow read: if request.auth != null; // Or restrict to accessLevel <= 2
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Milestones: Admins can CRUD. Members can read.
    match /milestones/{milestoneId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // StockItems: Admins can CRUD. Others might read.
    match /stockItems/{itemId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // StockTransactions: Admins can CRUD. Others might read.
    match /stockTransactions/{transactionId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // AuditLog: Admins can read. System (via Cloud Functions ideally) writes. Direct client write should be very restricted.
    match /auditLog/{logId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 2; // Admins/specific roles
      allow create: if false; // Prevent direct client creation; use backend/functions
    }

    // BankBalances: Admins/Treasurers can CRUD.
    match /bankBalances/{balanceId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 2;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Tenants: Admins can CRUD.
    match /tenants/{tenantId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // RentInvoices: Admins can CRUD.
    match /rentInvoices/{invoiceId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Professionals: Admins can CRUD.
    match /professionals/{professionalId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Penalties: System writes (ideally). Admins can manage. Users can read their own.
    match /penalties/{penaltyId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1);
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1; // Or via functions
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Notifications: Users can read their own or 'all' notifications. Admins can create 'all' or specific.
    match /notifications/{notificationId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || resource.data.userId == 'all');
      // Create rule: only admins or system (functions)
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
      // Update rule: users can mark their own as read. Admins can mark any.
      allow update: if request.auth != null &&
                       ( (resource.data.userId == request.auth.uid && request.resource.data.isRead == true && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead'])) ||
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1
                       );
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1; // Admin delete only
    }
  }
}
