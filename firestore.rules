
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Global settings: Allow public read.
    // IMPORTANT: For write, ensure only admins can modify. This example assumes an accessLevel field in the user's document.
    match /settings/global_settings {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Users: Authenticated users can read their own profile. Admins can manage.
    match /users/{userId} {
      allow read: if request.auth != null; // Users can read profiles (consider restricting fields)
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1; // Admin can create users
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1); // User can update own, admin can update any
    }

    // Contributions: Users can create their own and read their own. Admins/Treasurers can read all.
    match /contributions/{contributionId} {
      allow read: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 2);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Update/delete usually admin only
    }

    // Expenses: Admins/Treasurers can manage. Others can read if needed.
    match /expenses/{expenseId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 2;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Milestones: Viewable by all authenticated, managed by Admins.
    match /milestones/{milestoneId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Stock Items & Transactions: Viewable by all authenticated, managed by Admins.
    match /stockItems/{itemId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }
    match /stockTransactions/{transactionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Audit Log: Readable by Admins. Creation might be restricted or handled by backend functions.
    match /auditLog/{logId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
      allow create: if request.auth != null; // Or more specific rules
    }

    // Bank Balances: Readable by Admins/Treasurers. Managed by Admins.
    match /bankBalances/{balanceId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 2;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Tenant Management: Managed by Admins.
    match /tenants/{tenantId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }
    match /rentInvoices/{invoiceId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Professionals: Managed by Admins.
    match /professionals/{professionalId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Notifications: Users can read their own or 'all'. Admins can create.
    match /notifications/{notificationId} {
      allow read: if request.auth != null && (request.resource.data.userId == request.auth.uid || request.resource.data.userId == "all");
      allow update(setData): if request.auth != null && (request.resource.data.userId == request.auth.uid || request.resource.data.userId == "all") && setData.keys().hasOnly(['isRead']); // Only allow updating 'isRead'
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }
    
    // Penalties: Users can read their own. Admins manage.
    match /penalties/{penaltyId} {
        allow read: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1);
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessLevel <= 1;
    }

    // Default deny all other paths if not explicitly matched above.
    // match /{document=**} {
    //   allow read, write: if false;
    // }
  }
}

    