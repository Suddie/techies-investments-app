
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Function to get user's access level from their profile in Firestore
    // Returns 4 if user profile or accessLevel is not found (most restrictive)
    function getUserAccessLevel(userId) {
      let userDocData = get(/databases/$(database)/documents/users/$(userId)).data;
      // Use ternary operator for conditional logic within the return statement
      return userDocData == null || !('accessLevel' in userDocData) ? 4 : userDocData.accessLevel;
    }

    // Users Collection
    // Rules for accessing individual user documents
    match /users/{userId} {
      allow read: if isAuthenticated() && (isUser(userId) || getUserAccessLevel(request.auth.uid) <= 1);
      allow update: if isAuthenticated() && (isUser(userId) || getUserAccessLevel(request.auth.uid) <= 1);
      // Create is typically handled by Admin through a secure function or specific logic,
      // but if client-side creation is allowed for admins:
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      // Delete should generally be restricted or handled server-side (e.g., marking inactive)
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only super admin
    }
    // Rule for listing all users (e.g., for an admin panel)
    match /users {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Settings Collection
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read global settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admin can write
    }

    // Contributions Collection
    match /contributions/{contributionId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && getUserAccessLevel(request.auth.uid) <= 3;
      // Users can read their own contributions, Level 1 can read all
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || getUserAccessLevel(request.auth.uid) <= 1);
      // Updates and deletes are typically restricted to admin/backend logic
      allow update: if false;
      allow delete: if false;
    }
    match /contributions {
        // Allow listing for Level 1 users (e.g., for admin reports)
        allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }


    // Expenses Collection
    match /expenses/{expenseId} {
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Level 1 users can create
      allow read: if isAuthenticated(); // All authenticated users can read expenses
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Level 1 users can update
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Level 1 users can delete
    }
     match /expenses {
        allow list: if isAuthenticated(); // All authenticated users can list expenses
    }

    // Milestones Collection
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated(); // All authenticated users can view milestones
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Level 1 can manage
    }
    match /milestones {
       allow list: if isAuthenticated();
    }

    // Stock Items Collection
    match /stockItems/{itemId} {
      allow read: if isAuthenticated(); // All authenticated users can view stock items
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Level 1 can manage
    }
     match /stockItems {
       allow list: if isAuthenticated();
    }
    
    // Stock Transactions Collection
    match /stockTransactions/{transactionId} {
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Level 1 can record transactions
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;   // Level 1 can view transactions
      allow update, delete: if false; // Transactions should be immutable from client once created
    }
    match /stockTransactions {
        allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Level 1 can list transactions
    }

    // Add rules for other collections as needed (notifications, auditLog, etc.)

  }
}
