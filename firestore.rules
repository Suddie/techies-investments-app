
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // IMPORTANT: This function makes a document read.
    // Ensure its usage is optimized in rules to avoid excessive reads.
    function getUserAccessLevel(userId) {
      let userData = getUserData(userId);
      // Check if userData itself is null (document doesn't exist)
      // or if accessLevel field is not present in userData
      if (userData == null || !('accessLevel' in userData)) {
        // Default to a highly restrictive level if profile or accessLevel is missing
        return 4; // A level that grants no typical app access
      }
      return userData.accessLevel;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated(); // All authenticated users can read any profile (e.g., for names in lists)
                                    // Or, more restrictively: if isUser(userId) || getUserAccessLevel(request.auth.uid) == 1;
      allow create: if getUserAccessLevel(request.auth.uid) == 1; // Only Admins (Level 1) can create users
      allow update: if getUserAccessLevel(request.auth.uid) == 1 || 
                       (isUser(userId) && ('requiresPasswordChange' in request.resource.data && request.resource.data.requiresPasswordChange == false)); // Admins or user updating their own requiresPasswordChange
      allow delete: if getUserAccessLevel(request.auth.uid) == 1; // Only Admins (Level 1) can delete users
    }

    // Global Settings
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admins (L1) can write settings
    }

    // Contributions
    match /contributions/{contributionId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid && // User creating their own contribution
                       getUserAccessLevel(request.auth.uid) <= 3 &&
                       request.resource.data.amount >= get(/databases/$(database)/documents/settings/global_settings).data.contributionMin &&
                       request.resource.data.amount <= get(/databases/$(database)/documents/settings/global_settings).data.contributionMax;
      allow update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admins (L1) can modify/delete
    }

    // Expenses
    match /expenses/{expenseId} {
      // TEMPORARY RULE FOR DEVELOPMENT: Allows any authenticated user to read.
      allow read: if isAuthenticated();
      // ORIGINAL RULE: allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Placeholder, often false for immutability
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId == request.auth.uid || get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId == 'all');
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admins for manual notifications, or Cloud Functions
      allow update: if isAuthenticated() && (isUser(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId)); // User marking their own as read
    }

    // Audit Log - Generally, client-side writes are disallowed or heavily restricted
    match /auditLog/{logId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2; // L1 & L2 can read audit logs
      allow create, update, delete: if false; // Written by Cloud Functions
    }

    // --- Placeholder rules for other collections based on requirements ---
    // These will need to be refined as features are implemented.

    // Project Management (Stock)
    match /stockItems/{itemId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
    }
    match /stockTransactions/{transactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
      allow update, delete: if false; // Transactions usually immutable
    }

    // Project Management (Milestones)
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
    }

    // Tenant Management
    match /tenants/{tenantId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2; // L1 & L2
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
    }
    match /rentInvoices/{invoiceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2; // L1 & L2
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
    }

    // Professional/Labor Management
    match /professionals/{professionalId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2; // L1 & L2
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
    }
    
    // Bank Management
    match /bankBalances/{balanceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Or specific Treasurer roles
    }
    match /bankTransactions/{transactionId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Or specific Treasurer roles
    }

    // Company Info (for Tax Summary)
    match /companyInfo/{docId} { // Assuming a single document, e.g., /companyInfo/details
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1;
    }

  }
}

    