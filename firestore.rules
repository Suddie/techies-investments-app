
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserAccessLevel(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.accessLevel != null ? userDoc.data.accessLevel : 4; // Default to 4 if no doc or no accessLevel
    }

    // Settings
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Level 1 (Admin) can write
    }

    // Users
    match /users/{userId} {
      allow read: if isAuthenticated(); // Users can read their own profile, Admins can read any
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admin can create user profiles
      allow update: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) == 1); // User can update own, Admin can update any
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admin can delete
    }
    match /users/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Level 1 can list users
    }

    // Contributions
    match /contributions/{contributionId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid && getUserAccessLevel(request.auth.uid) <= 3;
      // Basic validation: amount must be positive. More complex validation (min/max against settings) is hard in rules without direct settings read.
      // && request.resource.data.amount > 0; 
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || getUserAccessLevel(request.auth.uid) <= 1);
      allow update, delete: if false; // Generally, contributions should be immutable or managed by backend
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if isAuthenticated(); // All authenticated users can read expenses
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Milestones
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    
    // Stock Items
    match /stockItems/{itemId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Transactions
    match /stockTransactions/{transactionId} {
      allow list, get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update, delete: if false; // Transactions should be immutable
    }
    
    // Audit Log
    match /auditLog/{logId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if false; // Logs should be append-only from trusted source (Cloud Functions)
    }

    // Bank Balances
    match /bankBalances/{balanceId} {
      allow list, get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Tenants
    match /tenants/{tenantId} {
      allow get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
     match /tenants/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Rent Invoices
    match /rentInvoices/{invoiceId} {
      allow list, get: if isAuthenticated() && (
        (getUserAccessLevel(request.auth.uid) <= 1) || 
        (resource.data.tenantId == request.resource.data.tenantIdWhereUserIsAssociated) // This part needs a way to link user to tenants for self-service invoice viewing. Deferring for now.
      ); // Level 1 can see all. Future: tenant can see their own.
      allow create, update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Or `if false;` if invoices should be immutable once created.
    }
  }
}
