
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserAccessLevel(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data != null && userDoc.data.accessLevel != null ? userDoc.data.accessLevel : 99; // Default to a high number if not found
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Typically admin creates users
      allow update: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 1);
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1 && request.auth.uid != userId; // Admin can delete, but not self-delete via this rule directly
    }

    // Settings collection (global_settings document)
    match /settings/global_settings {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admin
    }

    // Contributions collection
    match /contributions/{contributionId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || getUserAccessLevel(request.auth.uid) <= 2); // User can read own, L1/L2 can read all
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid; // User can create their own
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admin/L1 can update (e.g., for isLate flag by function)
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Expenses collection
    match /expenses/{expenseId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3; // All authenticated users can view
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only L1 can manage
    }

    // Milestones collection
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Items collection
    match /stockItems/{itemId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Transactions collection
    match /stockTransactions/{transactionId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Transactions are append-only by L1
      allow update, delete: if false; // Generally, transactions should not be updatable/deletable by client
    }

    // Audit Log collection
    match /auditLog/{logId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3; // Or specific roles like admin/treasurer
      allow create: if false; // Logs should only be created by backend/Cloud Functions
      allow update, delete: if false;
    }

    // Bank Balances collection
    match /bankBalances/{balanceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Tenants collection
    match /tenants/{tenantId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Rent Invoices collection
    match /rentInvoices/{invoiceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Professionals collection
    match /professionals/{professionalId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                    (resource.data.userId == 'all' || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Admin or system (via Cloud Function) creates
      allow update: if isAuthenticated() &&
                      ( (resource.data.userId == request.auth.uid && request.resource.data.isRead == true && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead'])) ||
                        (getUserAccessLevel(request.auth.uid) <= 1 && request.resource.data.isRead == true && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead'])) ); // User marks their own or 'all' as read, Admin marks any as read
      allow delete: if false; // Generally disallow client-side deletion
    }

    // Ensure this is the final closing brace for match /databases/{database}/documents { ... }
  }
}
