
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserAccessLevel(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.accessLevel != null ? userDoc.data.accessLevel : 4; // Default to 4 if no doc or no accessLevel
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 2);
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Admin creates users
      allow update: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 1);
      allow delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only admin can delete
    }
    // Allow admin to list all users
    match /users/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    
    // Global Settings
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only Admin can write
    }

    // Contributions
    match /contributions/{contributionId} {
      allow create: if isAuthenticated() 
                    && request.resource.data.userId == request.auth.uid
                    && getUserAccessLevel(request.auth.uid) <= 3;
      allow read: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || getUserAccessLevel(request.auth.uid) <= 1);
      allow update, delete: if false; // Client-side updates/deletes disallowed
    }
    // Allow admins/treasurers to list all contributions
     match /contributions/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Expenses
    match /expenses/{expenseId} {
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow read, list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow delete: if false; // Generally disallow client-side deletes for audit trail
    }

    // Milestones
    match /milestones/{milestoneId} {
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow read, list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
    }

    // Stock Items
    match /stockItems/{itemId} {
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow read, list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
    }

    // Stock Transactions
    match /stockTransactions/{transactionId} {
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow read, list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3; // Allow view for more roles
      allow update, delete: if false; // Transactions should be immutable from client
    }

    // Audit Log
    match /auditLog/{logId} {
      allow read, list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if false; // Logs should only be created by trusted server-side code
    }

    // Bank Balances
    match /bankBalances/{balanceId} {
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow read, list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Tenants
    match /tenants/{tenantId} {
      allow get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    match /tenants/{document=**} {
       allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Rent Invoices
    match /rentInvoices/{invoiceId} {
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow read, list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Or <= 2 if others need to view all
    }

    // Professionals
    match /professionals/{professionalId} {
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow read, list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }
  }
}
