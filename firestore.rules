
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.role != null ? userDoc.data.role : 'Unknown';
    }

    function getUserAccessLevel(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc != null && userDoc.data.accessLevel != null ? userDoc.data.accessLevel : 4; // Default to most restrictive if no doc or no accessLevel
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Admin creates users
      allow update: if isAuthenticated() && (request.auth.uid == userId || getUserAccessLevel(request.auth.uid) <= 1);
      // No client-side deletes for users, handled by Admin in UI (soft delete or via backend)
      allow delete: if false;
    }
    // Allow Admins (Level 1) and specific Level 2 roles (e.g., for reporting) to list users
    match /users/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Settings collection
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admin can write
    }

    // Contributions collection
    match /contributions/{contributionId} {
      allow get: if isAuthenticated() && (resource.data.userId == request.auth.uid || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && getUserAccessLevel(request.auth.uid) <= 3;
      allow update, delete: if false; // Generally, contributions should be immutable or handled by backend
    }
    match /contributions/{document=**} {
      // Level 1 (Admin, Treasurer) and Level 2 (for dashboard summary) can list all contributions
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Expenses collection
    match /expenses/{expenseId} {
      allow read: if isAuthenticated(); // Allow all authenticated users to read for now for simplicity
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Milestones collection
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated(); // All authenticated users can view milestones
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Items collection
    match /stockItems/{itemId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Transactions collection
    match /stockTransactions/{transactionId} {
      allow get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update, delete: if false; // Transactions should be immutable
    }

    // Audit Log collection
    match /auditLog/{logId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create, update, delete: if false; // Only backend/Cloud Functions should write
    }

    // Bank Balances collection
    match /bankBalances/{balanceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    match /bankBalances/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Tenants collection
    match /tenants/{tenantId} {
      allow get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    match /tenants/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Rent Invoices collection
    match /rentInvoices/{invoiceId} {
      allow get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2; // L1 and L2 can get individual invoices
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    match /rentInvoices/{document=**} {
      // Allow L1 and L2 to list invoices (e.g., for reporting)
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }

    // Professionals collection
    match /professionals/{professionalId} {
      allow get: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    match /professionals/{document=**} {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    }
    
    // Company Info (for Tax Summary, though this data is in global_settings now)
    // If we had a separate companyInfo collection:
    // match /companyInfo/{infoId} {
    //   allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
    //   allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    // }
  }
}
