
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserAccessLevel(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      if (userDoc != null && userDoc.data.accessLevel != null) {
        return userDoc.data.accessLevel;
      }
      return 4; // Default to most restrictive if no doc or no accessLevel
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Global Settings
    match /settings/global_settings {
      allow read: if isAuthenticated(); // All authenticated users can read settings
      allow write: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admins (Level 1)
    }

    // Users
    // Rule for listing users (e.g., for an admin panel)
    match /users {
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
    // Rules for individual user documents
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || getUserAccessLevel(request.auth.uid) <= 1);
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) == 1; // Only Admin creates users
      allow update: if isAuthenticated() && (isOwner(userId) || getUserAccessLevel(request.auth.uid) == 1);
      allow delete: if false; // Generally, don't allow client-side user deletion
    }

    // Contributions
    match /contributions/{contributionId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || getUserAccessLevel(request.auth.uid) <= 1);
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1; // Only admins list all
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.userId &&
                       getUserAccessLevel(request.auth.uid) <= 3 &&
                       request.resource.data.amount > 0; // Basic validation
      allow update, delete: if false; // Typically handled by backend or specific admin functions
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if isAuthenticated(); // Allow all authenticated users to read expenses
      allow list: if isAuthenticated(); // Allow all authenticated users to list expenses
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow delete: if false; // Or restrict to Level 1 if needed
    }

    // Milestones
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Items
    match /stockItems/{itemId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Stock Transactions
    match /stockTransactions/{transactionId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 3;
      allow create: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
      allow update, delete: if false; // Transactions should generally be immutable
    }

    // Audit Log
    match /auditLog/{logId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create, update, delete: if false; // Only backend (Cloud Functions) should write
    }

    // Bank Balances
    match /bankBalances/{balanceId} {
      allow read: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow list: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 2;
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }

    // Tenants
    match /tenants {
      allow list: if isAuthenticated() &&
                       (let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
                        userDoc != null &&
                        userDoc.data.accessLevel != null &&
                        userDoc.data.accessLevel <= 2);
    }
    match /tenants/{tenantId} {
      allow get: if isAuthenticated() &&
                      (let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
                       userDoc != null &&
                       userDoc.data.accessLevel != null &&
                       userDoc.data.accessLevel <= 2);
      allow create, update, delete: if isAuthenticated() && getUserAccessLevel(request.auth.uid) <= 1;
    }
  }
}
